using System.Collections;
using System.Collections.Generic;
using System.Text;
using Unity.VisualScripting;
using UnityEditor;
using UnityEngine;

public class Player : MonoBehaviour
{
    
    [SerializeField] private int speed = 5;
    [SerializeField] GameObject laserPrefab;
    
    [SerializeField] GameObject spawnManager;

    [SerializeField] private float fireRate = 0.15f;
    private float nextFire = 0f;
    [SerializeField] private int health = 5;

    [SerializeField] GameObject tripleShotPrefab;
    public bool isTripleShotActive = false;
    

    
    void Update()
    {
        move();
        createLaser();
    }

    void createLaser()
    {
        if(nextFire < Time.time)
        {
            if (Input.GetKeyDown(KeyCode.Space) && isTripleShotActive) //3lü atış
            {
                Instantiate(tripleShotPrefab, new Vector3(transform.position.x, transform.position.y, transform.position.z), Quaternion.identity);
                nextFire = Time.time + fireRate;
            }
            else if (Input.GetKeyDown(KeyCode.Space) )// tekli atış
            {
                Instantiate(laserPrefab, new Vector3(transform.position.x, transform.position.y, transform.position.z), Quaternion.identity);
                nextFire = Time.time + fireRate;
            }
        }    
    }

    private void move()
    {
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        Vector3 move = new Vector3(horizontalInput, verticalInput, 0);

        transform.position += move * speed * Time.deltaTime;
    }

    public void getDamage()
    {
        health--;
        if (health > 0)
        {
            ;
        }
        else
        {
            spawnManager.GetComponent<SpawnManager>().playerAlive = false;
            Destroy(this.gameObject);   
        }
    }

    IEnumerator DeactivateTripleShot()
    {
        yield return new WaitForSeconds(5.0f);
        isTripleShotActive = false;
    }
    public void activateTripleShot()
    {
        StartCoroutine(DeactivateTripleShot());
        isTripleShotActive = true;
    }
   
}

